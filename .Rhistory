# set initial thresholds
# tomatoUserReviews: 25000
# imdbVotes: 25000
# tomatoReviews: 30
movieDetails <- movieDetails[movieDetails$tomatoUserReviews >= 25000 & movieDetails$imdbVotes >= 25000 & movieDetails$tomatoReviews >= 30, ]
movieDetails <- movieDetails[!is.na(movieDetails$tomatoMeter), ]
movieDetails$tomatoMeterDiff <- movieDetails$tomatoMeter - movieDetails$tomatoUserMeter
genres <- unique(unlist(strsplit(unlist(as.character(movieDetails$genre)), split=", ")))
movieDetails$primary.genre <- sapply(movieDetails$genre, function (x) strsplit(as.character(x), split=", ")[[1]][1])
ggplot(movieDetails[movieDetails$rated %in% c("R", "PG", "PG-13"), ], aes(rated, tomatoMeterDiff)) + geom_boxplot()
test <- movieDetails[movieDetails$primary.genre %in% c("Action", "Comedy", "Drama", "Adventure", "Biography"), ]
fit <- aov(tomatoMeterDiff ~ rated, data=movieDetails[movieDetails$rated %in% c("R", "PG", "PG-13"), ])
summary(fit)
fit <- aov(tomatoMeterDiff ~ primary.genre, data=test)
summary(fit)
ggplot(test, aes(primary.genre, tomatoMeterDiff)) + geom_boxplot()
install.packages("genderizeR")
install.packages("genderizeR")
genderize("francois")
library("genderizeR")
library("genderizeR")
genderize("francois")
genderize("francois", "francois")
givenNames = findGiveNames("francois")
givenNames = findGivenNames("francois")
library(ggplot2)
library(ggrepel)
#### sources
# http://www.pokemongodb.net/2016/07/average-pokemon-cp-gain-per-power-up.html
# https://pokeassistant.com/main/pokemonstats
# http://www.serebii.net/pokemongo/evolution.shtml
setwd("/Users/kaylinwalker/R/pokemon_probability")
prob <- read.csv("poke_cumulative_prob.csv", stringsAsFactors=F)
poke <- read.csv("poke_all.csv", stringsAsFactors=F)
poke$Rarity <- round(poke$Rarity/100,4)
poke$Capture <- round(poke$Capture/100,4)
poke$Flee <- round(poke$Flee/100,4)
poke[1:5,c(14,15)]
prob.plot <- merge(prob, poke[,c(14,15)], by.x="pokemon", by.y="Pokemon", all.x=T)
prob.plot <- merge(prob, poke[,c(14,15)], by="pokemon", all.x=T)
prob.plot <- merge(prob, poke[,c(14,15)], by.x="pokemon",by.y="Pokemon", all.x=T)
prob.plot <- merge(prob, poke[,c(14,15)], by="pokemon", all=T)
prob.plot <- merge(prob, poke[,c(1,14,15)], by.x="pokemon", by.y="Pokemon", all=T)
prob.plot <- merge(prob, poke[,c(1,14,15)], by.x="pokemon", by.y="Pokemon", all.x=T)
View(prob.plot)
first <- prob.plot[prob.plot$Stage==1 & prob.plot$Total.Stages==1, ]
first <- prob.plot[prob.plot$Stage==1, ]
table(prob.plot$Stage)
two <- prob.plot[prob.plot$Stage==2 & prob.plot$Total.Stages==2, ]
View(two)
ggplot(two, aes(encounters, prob)) + geom_line(aes(color=pokemon), size=2)
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
ggplot(two, aes(encounters, prob)) + geom_line(aes(color=pokemon), size=2)
prob.plot <- merge(prob, poke[,c(1,3,14,15)], by.x="pokemon", by.y="Pokemon", all.x=T)
table(prob.plot$Type.1)
two <- prob.plot[prob.plot$Type.1 %in% c("Dragon", "Fairy", "Ghost", "Psychic"), ]
ggplot(two, aes(encounters, prob)) + geom_line(aes(color=pokemon), size=2)
ggplot(two, aes(encounters, prob)) + geom_line(aes(color=pokemon), size=2, alpha=.5)
two <- prob.plot[prob.plot$Type.1 %in% c("Water"), ]
ggplot(two, aes(encounters, prob)) + geom_line(aes(color=pokemon))
View(prob.plot)
prob.plot[prob.plot$pokemon=="Venusaur",]
g <- aggregate(prob ~ pokemon, prob.plot, max)
View(g)
poke1 <- poke[,2]
poke1 <- poke[2,]
View(poke1)
prob.df <- data.frame()
j <- 1
j <- j + 100
candies <- ceiling(poke1$Candy.it.Took/4)
prob <- 1 - pbinom((candies + 1), size=j, prob=poke1$Candy.Prob)
j <- 100
candies <- ceiling(poke1$Candy.it.Took/4)
prob <- 1 - pbinom((candies + 1), size=j, prob=poke1$Candy.Prob)
poke1$Candy.Prob
library(ggplot2)
library(ggrepel)
#### sources
# http://www.pokemongodb.net/2016/07/average-pokemon-cp-gain-per-power-up.html
# https://pokeassistant.com/main/pokemonstats
# http://www.serebii.net/pokemongo/evolution.shtml
setwd("/Users/kaylinwalker/R/pokemon_probability")
poke <- read.csv("poke_all.csv", stringsAsFactors=F)
poke$Rarity <- round(poke$Rarity/100,4)
poke$Capture <- round(poke$Capture/100,4)
poke$Flee <- round(poke$Flee/100,4)
######## CATCH OR EVOLVE?
# ease of catching
poke$Catch.Ease <- NA
for(h in seq_along(poke[,1])){
throw1 <- poke$Capture[h]
throw2 <- (1-throw1) * (1-poke$Flee[h])^1 * throw1
throw3 <- (1-sum(throw1, throw2)) * (1-poke$Flee[h])^2 * throw1
throw4 <- (1-sum(throw1, throw2, throw3)) * (1-poke$Flee[h])^3 * throw1
throw5 <- (1-sum(throw1, throw2, throw3, throw4)) * (1-poke$Flee[h])^4 * throw1
poke$Catch.Ease[h] <- poke$Rarity[h] * sum(throw1, throw2, throw3, throw4, throw5)
}
# ease of evolving
candy <- poke[poke$Stage==1 & poke$Total.Stages>1, c(1,14,15,20)]
poke$Evolve.Ease.100 <- NA
poke$Evolve.Ease.1000 <- NA
poke$Evolve.Ease.10000 <- NA
poke$Candy.Prob <- NA
for(g in seq_along(poke[,1])){
if(poke$Stage[g]>1){
poke$Candy.Prob[g] <- candy[candy$Pokemon==poke$Family[g], 4]
catches.needed <- ceiling(poke$Candy.it.Took[g]/4) + 1
poke$Evolve.Ease.100[g] <- 1 - pbinom(catches.needed, size=100, prob=poke$Candy.Prob[g])
poke$Evolve.Ease.1000[g] <- 1 - pbinom(catches.needed, size=1000, prob=poke$Candy.Prob[g])
poke$Evolve.Ease.10000[g] <- 1 - pbinom(catches.needed, size=10000, prob=poke$Candy.Prob[g])
}
}
candies <- ceiling(poke1$Candy.it.Took/4)
prob <- 1 - pbinom((candies + 1), size=j, prob=poke1$Candy.Prob)
poke1 <- poke[2,]
prob <- 1 - pbinom((candies + 1), size=j, prob=poke1$Candy.Prob)
prob.1 <- data.frame(pokemon=poke1$Pokemon,encounters=j, prob)
prob.df <- rbind(prob.df, prob.1)
max.prob <- max(prob.df$prob)
j <- j + 100
prob_test <- function(poke1){
prob.df <- data.frame()
j <- 1
while(max.prob < 0.999) {
j <- j + 100
candies <- ceiling(poke1$Candy.it.Took/4)
prob <- 1 - pbinom((candies + 1), size=j, prob=poke1$Candy.Prob)
prob.1 <- data.frame(pokemon=poke1$Pokemon,encounters=j, prob)
prob.df <- rbind(prob.df, prob.1)
max.prob <- max(prob.df$prob)
}
return(prob.df)
}
table <- prob_test(poke[2,])
View(table)
all.probs <- data.frame()
for(p in poke$Pokemon[poke$Stage>1]){
probs <- prob_test(poke[poke$Pokemon==p, ])
all.probs <- rbind(all.probs, probs)
}
table(all.probs$pokemon)
length(unique((all.probs$pokemon))
)
totals <- aggregate(encounters ~ pokemon, all.probs, max)
View(totals)
View(totals)
prob_test <- function(poke1){
prob.df <- data.frame()
j <- 1
while(max.prob < 0.99) {
j <- j + 10
candies <- ceiling(poke1$Candy.it.Took/4)
prob <- 1 - pbinom((candies + 1), size=j, prob=poke1$Candy.Prob)
prob.1 <- data.frame(pokemon=poke1$Pokemon,encounters=j, prob)
prob.df <- rbind(prob.df, prob.1)
max.prob <- max(prob.df$prob)
if(j > 10000) { j <- j + 990 }
if(j > 1000) { j <- j + 90 }
}
return(prob.df)
}
table <- prob_test(poke[2,])
View(table)
prob_test <- function(poke1){
prob.df <- data.frame()
j <- 1
while(max.prob < 0.99) {
j <- j + 10
candies <- ceiling(poke1$Candy.it.Took/4)
prob <- 1 - pbinom((candies + 1), size=j, prob=poke1$Candy.Prob)
prob.1 <- data.frame(pokemon=poke1$Pokemon,encounters=j, prob)
prob.df <- rbind(prob.df, prob.1)
max.prob <- max(prob.df$prob)
if(j > 1000) { j <- j + 90 }
if(j > 10000) { j <- j + 900 }
}
return(prob.df)
}
table <- prob_test(poke[2,])
all.probs <- data.frame()
for(p in poke$Pokemon[poke$Stage>1]){
probs <- prob_test(poke[poke$Pokemon==p, ])
all.probs <- rbind(all.probs, probs)
}
totals <- aggregate(encounters ~ pokemon, all.probs, max)
View(totals)
p <- 2
prob_test <- function(poke1, threshold){
prob.df <- data.frame()
j <- 1
while(max.prob < threshold) {
j <- j + 10
candies <- ceiling(poke1$Candy.it.Took/4)
prob <- 1 - pbinom((candies + 1), size=j, prob=poke1$Candy.Prob)
prob.1 <- data.frame(pokemon=poke1$Pokemon,encounters=j, prob)
prob.df <- rbind(prob.df, prob.1)
max.prob <- max(prob.df$prob)
if(j > 1000) { j <- j + 90 }
if(j > 10000) { j <- j + 900 }
}
return(prob.df)
}
table <- prob_test(poke[2,], .25)
View(table)
probs50 <- prob_test(poke[poke$Pokemon==p, 0.50])
probs50 <- prob_test(poke[poke$Pokemon==p,] ,0.5)
prob.df <- data.frame()
j <- 1
max.prob < threshold
threshold <- 0.5
j <- j + 10
candies <- ceiling(poke1$Candy.it.Took/4)
prob <- 1 - pbinom((candies + 1), size=j, prob=poke1$Candy.Prob)
prob.1 <- data.frame(pokemon=poke1$Pokemon,encounters=j, prob)
prob.df <- rbind(prob.df, prob.1)
max.prob <- max(prob.df$prob)
if(j > 1000) { j <- j + 90 }
if(j > 10000) { j <- j + 900 }
prob_test <- function(poke1, threshold){
prob.df <- data.frame()
j <- 1
while(max.prob < threshold) {
j <- j + 10
candies <- ceiling(poke1$Candy.it.Took/4)
prob <- 1 - pbinom((candies + 1), size=j, prob=poke1$Candy.Prob)
prob.1 <- data.frame(pokemon=poke1$Pokemon,encounters=j, prob)
prob.df <- rbind(prob.df, prob.1)
max.prob <- max(prob.df$prob)
if(j > 1000) { j <- j + 90 }
if(j > 10000) { j <- j + 900 }
}
return(prob.df)
}
table <- prob_test(poke[2,], .25)
p <-"Venusaur"
probs50 <- prob_test(poke[poke$Pokemon==p,], 0.5)
View(probs50)
probs75 <- prob_test(poke[poke$Pokemon==p,], 0.75)
View(probs75)
prob_test <- function(poke1, threshold){
prob.df <- data.frame()
j <- 1
while(max.prob < threshold) {
candies <- ceiling(poke1$Candy.it.Took/4)
prob <- 1 - pbinom((candies + 1), size=j, prob=poke1$Candy.Prob)
prob.1 <- data.frame(pokemon=poke1$Pokemon,encounters=j, prob)
prob.df <- rbind(prob.df, prob.1)
max.prob <- max(prob.df$prob)
j <- j + 10
if(j > 1000) { j <- j + 90 }
if(j > 10000) { j <- j + 900 }
}
return(prob.df)
}
table <- prob_test(poke[2,], .25)
probs99 <- prob_test(poke[poke$Pokemon==p,], 0.99)
View(probs99)
probs99[probs99$prob>0.5,]
x <- probs99[probs99$prob>0.5,]
x <- probs99[probs99$prob<=0.5,]
max(x$prob)
max(x$encounters)
p75 <- max(probs$encounters[probs$prob <= 0.5, ])
p75 <- max(probs$encounters[probs$prob <= 0.5])
p99 <- max(probs$encounters)
summary(probs)
all.probs <- data.frame()
for(p in poke$Pokemon[poke$Stage>1]){
probs <- prob_test(poke[poke$Pokemon==p,], 0.99)
p99 <- max(probs$encounters)
p75 <- max(probs$encounters[probs$prob <= 0.75])
p50 <- max(probs$encounters[probs$prob <= 0.5])
p25 <- max(probs$encounters[probs$prob <= 0.25])
probs0 <- data.frame(pokemon=probs$pokemon, p99, p75, p50, p25)
all.probs <- rbind(all.probs, probs0)
}
View(all.probs)
all.probs <- unique(all.probs)
View(all.probs)
library(reshape2)
gmelt <- melt(all.probs, id="pokemon")
ggplot(gmelt, aes(pokemon, value)) + geom_line()
View(gmelt)
ggplot(gmelt, aes(variable, value)) + geom_line(aes(color=pokemon))
ggplot(gmelt, aes(variable, value)) + geom_line(aes(color=pokemon, group=pokemon))
ggplot(gmelt, aes(variable, value)) + geom_bar(aes(fill=pokemon))
ggplot(gmelt, aes(variable, value)) + geom_bar(stat="identity",aes(fill=pokemon))
ggplot(gmelt, aes(variable, value)) + geom_bar(stat="identity",position="dodge",aes(fill=pokemon))
for(r in c(2,3,4)) all.probs[,r] <- all.probs[,r] - 1
View(all.probs)
for(r in c(2,3,4)) all.probs[,r] <- all.probs[,r] - 1
all.probs <- data.frame()
for(p in poke$Pokemon[poke$Stage>1]){
probs <- prob_test(poke[poke$Pokemon==p,], 0.99)
p99 <- max(probs$encounters)
p75 <- max(probs$encounters[probs$prob <= 0.75])
p50 <- max(probs$encounters[probs$prob <= 0.5])
p25 <- max(probs$encounters[probs$prob <= 0.25])
probs0 <- data.frame(pokemon=probs$pokemon[1], p99, p75, p50, p25)
all.probs <- rbind(all.probs, probs0)
}
for(r in c(2:5)) all.probs[,r] <- all.probs[,r] - 1
probs <- prob_test(poke[poke$Pokemon==p,], 0.99)
poke1 <- poke[poke$Pokemon=="Vaporeon",]
prob.df <- data.frame()
j <- 1
candies <- ceiling(poke1$Candy.it.Took/4)
prob <- 1 - pbinom((candies + 1), size=j, prob=poke1$Candy.Prob)
length(poke$Pokemon[poke$Stage>1])
all.probs <- data.frame()
for(p in poke$Pokemon[poke$Stage>1 & poke$Family!="Eevee", ]){
probs <- prob_test(poke[poke$Pokemon==p,], 0.99)
p99 <- max(probs$encounters)
p75 <- max(probs$encounters[probs$prob <= 0.75])
p50 <- max(probs$encounters[probs$prob <= 0.5])
p25 <- max(probs$encounters[probs$prob <= 0.25])
probs0 <- data.frame(pokemon=probs$pokemon[1], p99, p75, p50, p25)
all.probs <- rbind(all.probs, probs0)
}
all.probs <- data.frame()
for(p in poke$Pokemon[poke$Stage>1 & poke$Family!="Eevee"]){
probs <- prob_test(poke[poke$Pokemon==p,], 0.99)
p99 <- max(probs$encounters)
p75 <- max(probs$encounters[probs$prob <= 0.75])
p50 <- max(probs$encounters[probs$prob <= 0.5])
p25 <- max(probs$encounters[probs$prob <= 0.25])
probs0 <- data.frame(pokemon=probs$pokemon[1], p99, p75, p50, p25)
all.probs <- rbind(all.probs, probs0)
}
View(all.probs)
for(r in c(2:5)) all.probs[,r] <- all.probs[,r] - 1
View(all.probs)
.0031
.000031
31/100000
500000/15
write.csv(all.probs, "pokemon_encounters.csv", row.names=F)
j <- 1001
j <- j + 10
if(j > 1000) { j <- j + 90 }
if(j > 10000) { j <- j + 900 }
j <- 10001
j <- j + 10
if(j > 1000) { j <- j + 90 }
if(j > 10000) { j <- j + 900 }
j <- 0
while(j < 10100) {
j <- j + 10
if(j > 1000) { j <- j + 90 }
if(j > 10000) { j <- j + 900 }
}
j <- 0
while(j < 10100) {
j <- j + 10
if(j > 1000) { j <- j + 90 }
if(j > 10000) { j <- j + 900 }
print(j)
}
prob_test <- function(poke1, threshold){
prob.df <- data.frame()
j <- 0
while(max.prob < threshold) {
j <- j + 10
candies <- ceiling(poke1$Candy.it.Took/4)
prob <- 1 - pbinom((candies + 1), size=j, prob=poke1$Candy.Prob)
prob.1 <- data.frame(pokemon=poke1$Pokemon,encounters=j, prob)
prob.df <- rbind(prob.df, prob.1)
max.prob <- max(prob.df$prob)
if(j > 1000) { j <- j + 90 }
if(j > 10000) { j <- j + 900 }
}
return(prob.df)
}
all.probs <- data.frame()
for(p in poke$Pokemon[poke$Stage>1 & poke$Family!="Eevee"]){
probs <- prob_test(poke[poke$Pokemon==p,], 0.99)
p99 <- max(probs$encounters)
p75 <- max(probs$encounters[probs$prob <= 0.75])
p50 <- max(probs$encounters[probs$prob <= 0.5])
p25 <- max(probs$encounters[probs$prob <= 0.25])
probs0 <- data.frame(pokemon=probs$pokemon[1], p99, p75, p50, p25)
all.probs <- rbind(all.probs, probs0)
}
View(all.probs)
prob_test <- function(poke1, threshold){
prob.df <- data.frame()
j <- 0
while(max.prob < threshold) {
if(j <= 1000) { j <- j +10 }
candies <- ceiling(poke1$Candy.it.Took/4)
prob <- 1 - pbinom((candies + 1), size=j, prob=poke1$Candy.Prob)
prob.1 <- data.frame(pokemon=poke1$Pokemon,encounters=j, prob)
prob.df <- rbind(prob.df, prob.1)
max.prob <- max(prob.df$prob)
if(j >= 1000) { j <- j + 100 }
if(j >= 10000) { j <- j + 900 }
}
return(prob.df)
}
all.probs <- data.frame()
for(p in poke$Pokemon[poke$Stage>1 & poke$Family!="Eevee"]){
probs <- prob_test(poke[poke$Pokemon==p,], 0.99)
p99 <- max(probs$encounters)
p75 <- max(probs$encounters[probs$prob <= 0.75])
p50 <- max(probs$encounters[probs$prob <= 0.5])
p25 <- max(probs$encounters[probs$prob <= 0.25])
probs0 <- data.frame(pokemon=probs$pokemon[1], p99, p75, p50, p25)
all.probs <- rbind(all.probs, probs0)
}
for(r in c(2:5)) all.probs[,r] <- all.probs[,r] - 1
all.probs <- data.frame()
for(p in poke$Pokemon[poke$Stage>1 & poke$Family!="Eevee"]){
probs <- prob_test(poke[poke$Pokemon==p,], 0.99)
p99 <- max(probs$encounters)
p75 <- max(probs$encounters[probs$prob <= 0.75])
p50 <- max(probs$encounters[probs$prob <= 0.5])
p25 <- max(probs$encounters[probs$prob <= 0.25])
probs0 <- data.frame(pokemon=probs$pokemon[1], p99, p75, p50, p25)
all.probs <- rbind(all.probs, probs0)
}
View(all.probs)
prob_test <- function(poke1, threshold){
prob.df <- data.frame()
j <- 0
while(max.prob < threshold) {
if(j <= 1000) { j <- j +10 }
candies <- ceiling(poke1$Candy.it.Took/4)
prob <- 1 - pbinom((candies + 1), size=j, prob=poke1$Candy.Prob)
prob.1 <- data.frame(pokemon=poke1$Pokemon,encounters=j, prob)
prob.df <- rbind(prob.df, prob.1)
max.prob <- max(prob.df$prob)
if(j >= 1000) { j <- j + 100 }
if(j >= 10000) { j <- j + 1000 }
}
return(prob.df)
}
all.probs <- data.frame()
for(p in poke$Pokemon[poke$Stage>1 & poke$Family!="Eevee"]){
probs <- prob_test(poke[poke$Pokemon==p,], 0.99)
p99 <- max(probs$encounters)
p75 <- max(probs$encounters[probs$prob <= 0.75])
p50 <- max(probs$encounters[probs$prob <= 0.5])
p25 <- max(probs$encounters[probs$prob <= 0.25])
probs0 <- data.frame(pokemon=probs$pokemon[1], p99, p75, p50, p25)
all.probs <- rbind(all.probs, probs0)
}
View(all.probs)
prob_test <- function(poke1, threshold){
prob.df <- data.frame()
j <- 0
while(max.prob < threshold) {
if(j <= 1000) { j <- j +10 }
candies <- ceiling(poke1$Candy.it.Took/4)
prob <- 1 - pbinom((candies + 1), size=j, prob=poke1$Candy.Prob)
prob.1 <- data.frame(pokemon=poke1$Pokemon,encounters=j, prob)
prob.df <- rbind(prob.df, prob.1)
max.prob <- max(prob.df$prob)
if(j >= 1000) { j <- j + 100 }
}
return(prob.df)
}
all.probs <- data.frame()
for(p in poke$Pokemon[poke$Stage>1 & poke$Family!="Eevee"]){
probs <- prob_test(poke[poke$Pokemon==p,], 0.99)
p99 <- max(probs$encounters)
p75 <- max(probs$encounters[probs$prob <= 0.75])
p50 <- max(probs$encounters[probs$prob <= 0.5])
p25 <- max(probs$encounters[probs$prob <= 0.25])
probs0 <- data.frame(pokemon=probs$pokemon[1], p99, p75, p50, p25)
all.probs <- rbind(all.probs, probs0)
}
View(all.probs)
write.csv(all.probs, "pokemon_encounters.csv", row.names=F)
?pbinom
probplot <- merge(all.probs, poke[,c(1,20)], by.y="Pokemon", by.x="pokemon", all.x=T)
View(probplot)
probplot$Catches <- probplot$Catch.Ease * probplot$p99
ggplot(probplot, aes(p99, Catch.Ease)) + geom_point()
ggplot(probplot, aes(p99, Catches)) + geom_point()
write.csv(probplot[,c(1,2,6,7)], "pokemon_verdict.csv", row.names=F)
prob_test <- function(poke1, threshold){
prob.df <- data.frame()
j <- 0
while(max.prob < threshold) {
if(j <= 1000) { j <- j +10 }
candies <- ceiling(poke1$Candy.it.Took/4)
prob <- 1 - pbinom((candies + 1), size=j, prob=poke1$Candy.Prob)
prob.1 <- data.frame(pokemon=poke1$Pokemon,encounters=j, prob)
prob.df <- rbind(prob.df, prob.1)
max.prob <- max(prob.df$prob)
if(j >= 1000) { j <- j + 100 }
}
return(prob.df)
}
uj <- prob_test()
uj <- prob_test(poke[poke$Pokemon=="Pidgey", ], .99)
uj <- prob_test(poke[poke$Pokemon=="Pidgeotto", ], .99)
View(uj)
uj <- prob_test(poke[poke$Pokemon=="Raichu", ], .99)
uj <- prob_test(poke[poke$Pokemon=="Poliwhirl", ], .99)
ggplot(uj, aes(encounters, prob)) + geom_line()
ggplot(uj, aes(encounters, prob)) + geom_line(color="cadetblue", size=2) + theme_classic() + labs(title="Cumulative Probability of Evolving into a Poliwhirl") + xlab("Wild Pokémon Encounters") + ylab("Probability of Gaining Enough Candy to Evovle")
ggplot(uj, aes(encounters, prob)) + geom_line(color="cadetblue", size=2) + theme_classic() + labs(title="Cumulative Probability of Evolving into a Poliwhirl") + xlab("Wild Pokémon Encounters") + ylab("Probability of Evolving")
ggplot(uj, aes(encounters, prob)) + geom_line(color="cadetblue", size=2) + theme_bw() + labs(title="Cumulative Probability of Evolving into a Poliwhirl") + xlab("Wild Pokémon Encounters") + ylab("Probability of Evolving")
ggplot(uj, aes(encounters, prob)) + geom_line(color="cadetblue", size=2) + theme_bw() + labs(title="Cumulative Probability of Evolving into a Poliwhirl") + xlab("Wild Pokémon Encounters")
ggplot(uj, aes(encounters, prob)) + geom_line(color="cadetblue", size=2) + theme_bw() + labs(title="Cumulative Probability of Evolving into a Poliwhirl") + xlab("Wild Pokémon Encounters") + ylab("")
ggplot(uj, aes(encounters, prob)) + geom_line(color="cadetblue", size=2) + theme_bw() + labs(title="Cumulative Probability of Collecting\nEnough Poliwag Candy to Evolve into a Poliwhirl") + xlab("Wild Pokémon Encounters") + ylab("")
ggplot(uj, aes(encounters, prob)) + geom_line(color="cadetblue", size=2) + theme_bw() + labs(title="Cumulative Probability of Collecting\nEnough Poliwag Candy to Evolve into a Poliwhirl") + xlab("Wild Pokémon Encounters") + ylab("") + geom_vline(xintercept=860)
ggplot(uj, aes(encounters, prob)) + geom_line(color="cadetblue", size=2) + theme_bw() + labs(title="Cumulative Probability of Collecting\nEnough Poliwag Candy to Evolve into a Poliwhirl") + xlab("Wild Pokémon Encounters") + ylab("") + geom_vline(xintercept=860) + geom_vline(xintercept=1100) + geom_vline(xintercept=1800)
